import atexit
import pymysql
from config import Config


class Database:
    def __init__(self):
        self.host = Config.DB_HOST
        self.user = Config.DB_USER
        self.password = Config.DB_PASSWORD
        self.db_name = Config.DB_NAME
        self.cursor_class = pymysql.cursors.DictCursor
        self.connection = self.connect()  # ‚úÖ Kh·ªüi t·∫°o k·∫øt n·ªëi ban ƒë·∫ßu

    def connect(self):
        try:
            conn = pymysql.connect(
                host=self.host,
                user=self.user,
                password=self.password,
                db=self.db_name,
                cursorclass=self.cursor_class,
            )
            print("‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng!")
            return conn
        except Exception as e:
            print("‚ùå K·∫øt n·ªëi database th·∫•t b·∫°i:", e)
            return None

    def execute(self, sql, params=None, fetchone=False, fetchall=False, commit=False):
        conn = self.connect()
        if not conn:
            raise Exception("Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi database")

        try:
            with conn.cursor() as cursor:
                cursor.execute(sql, params or ())
                print("‚úÖ ƒê√£ th·ª±c thi truy v·∫•n:", sql)

                if commit:
                    self.commit()
                    print("‚úÖ ƒê√£ commit d·ªØ li·ªáu")

                if fetchone:
                    result = cursor.fetchone()
                    while not result and cursor.nextset():
                        result = cursor.fetchone()
                    print("‚úÖ fetchone", result)
                    return result

                if fetchall:
                    results = []
                    results.append(cursor.fetchall())
                    while cursor.nextset():
                        results.append(cursor.fetchall())
                    return results

                return None
        except Exception as e:
            print("‚ùå L·ªói khi th·ª±c thi truy v·∫•n:", repr(e))
            raise

    def close(self):  # ‚úÖ ƒê√≥ng k·∫øt n·ªëi khi ch∆∞∆°ng tr√¨nh k·∫øt th√∫c
        if self.connection:
            try:
                self.connection.close()
                print("üîå ƒê√£ ƒë√≥ng k·∫øt n·ªëi database")
            except Exception as e:
                print("‚ö†Ô∏è L·ªói khi ƒë√≥ng k·∫øt n·ªëi:", e)

    def execute_with_connection(self, queries):
        conn = self.connect()
        if not conn:
            raise Exception("Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi database")
        try:
            with conn.cursor() as cursor:
                return queries(cursor, conn)
        except Exception as e:
            print("‚ùå L·ªói execute_with_connection:", repr(e))
            raise
        finally:
            try:
                conn.close()
            except:
                pass


# T·∫°o instance khi import
db_instance = Database()


@atexit.register
def cleanup():
    db_instance.close()





